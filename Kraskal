class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])  
        return self.parent[u]

    def union(self, u, v):
        root_u = self.find(u)
        root_v = self.find(v)

        if root_u != root_v:
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1


def kruskal_with_union_find(vertices, edges):
    edges.sort(key=lambda x: x[2])  
    uf = UnionFind(len(vertices))
    mst = []  

    for u, v, weight in edges:
        if uf.find(u) != uf.find(v):
            uf.union(u, v)
            mst.append((u, v, weight))

    return mst


def kruskal_without_union_find(vertices, edges):
    edges.sort(key=lambda x: x[2])  
    mst = []  

    for u, v, weight in edges:
        if not creates_cycle(mst, u, v):
            mst.append((u, v, weight))

    return mst


def creates_cycle(mst, u, v):
    from collections import defaultdict

    graph = defaultdict(list)
    for edge in mst:
        graph[edge[0]].append(edge[1])
        graph[edge[1]].append(edge[0])

    visited = set()

    def dfs(node):
        if node == v:
            return True
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited and dfs(neighbor):
                return True
        return False

    return dfs(u)


def test_kruskal():
    vertices = [0, 1, 2, 3]
    edges = [
        (0, 1, 10),
        (0, 2, 6),
        (0, 3, 5),
        (1, 3, 15),
        (2, 3, 4)
    ]

    print("s union-find:")
    mst_uf = kruskal_with_union_find(vertices, edges)
    for u, v, weight in mst_uf:
        print(f"rebro: {u} - {v}, ves: {weight}")

    print("bez inion-find:")
    mst_no_uf = kruskal_without_union_find(vertices, edges)
    for u, v, weight in mst_no_uf:
        print(f"rebro: {u} - {v}, ves: {weight}")

test_kruskal()
