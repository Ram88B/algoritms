class Job:
    def __init__(self, id, length, weight):
        self.id = id  
        self.length = length  
        self.weight = weight  

    def __repr__(self):
        return f"Job(id={self.id}, length={self.length}, weight={self.weight})"


def greedy_diff(jobs):
    sorted_jobs = sorted(jobs, key=lambda job: job.weight - job.length, reverse=True)
    return sorted_jobs


def greedy_ratio(jobs):
    sorted_jobs = sorted(jobs, key=lambda job: job.weight / job.length, reverse=True)
    return sorted_jobs


def calculate_weighted_completion_time(jobs):
    completion_time = 0
    total_weighted_completion_time = 0
    for job in jobs:
        completion_time += job.length
        total_weighted_completion_time += job.weight * completion_time
    return total_weighted_completion_time


def test_scheduling_algorithms():
    jobs = [
        Job(1, 3, 5),
        Job(2, 2, 4),
        Job(3, 1, 3),
        Job(4, 4, 6),
        Job(5, 2, 1),
    ]

    print("Original Jobs:")
    for job in jobs:
        print(job)

    print("Scheduling using Greedy Difference (w_j - l_j):")
    scheduled_jobs_diff = greedy_diff(jobs)
    for job in scheduled_jobs_diff:
        print(job)
    
    total_weighted_completion_time_diff = calculate_weighted_completion_time(scheduled_jobs_diff)
    print(f"Total Weighted Completion Time (Greedy Difference): {total_weighted_completion_time_diff}")

    print("Scheduling using Greedy Ratio (w_j / l_j):")
    scheduled_jobs_ratio = greedy_ratio(jobs)
    for job in scheduled_jobs_ratio:
        print(job)

    total_weighted_completion_time_ratio = calculate_weighted_completion_time(scheduled_jobs_ratio)
    print(f"Total Weighted Completion Time (Greedy Ratio): {total_weighted_completion_time_ratio}")


test_scheduling_algorithms()
