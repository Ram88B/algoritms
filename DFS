#include <iostream>
#include <vector>
#include <stack>
#include <chrono>

using namespace std;

class Graph {
public:
    Graph(int vertices);
    void addEdge(int v, int w);
    void DFSRecursive(int v);
    void DFSIterative(int v);
    void testDFS(int start);

private:
    int vertices; 
    vector<vector<int>> adj; 
    void DFSUtil(int v, vector<bool>& visited); 
};

Graph::Graph(int vertices) {
    this->vertices = vertices;
    adj.resize(vertices);
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
}

void Graph::DFSUtil(int v, vector<bool>& visited) {
    visited[v] = true;
    cout << v << " ";

    for (int i : adj[v]) {
        if (!visited[i]) {
            DFSUtil(i, visited);
        }
    }
}

void Graph::DFSRecursive(int v) {
    vector<bool> visited(vertices, false);
    DFSUtil(v, visited);
}

void Graph::DFSIterative(int v) {
    vector<bool> visited(vertices, false);
    stack<int> s;
    s.push(v);

    while (!s.empty()) {
        int current = s.top();
        s.pop();

        if (!visited[current]) {
            visited[current] = true;
            cout << current << " ";
        }

        for (int i : adj[current]) {
            if (!visited[i]) {
                s.push(i);
            }
        }
    }
}

void Graph::testDFS(int start) {
    cout << "Рекурсивный DFS: ";
    auto start_time = chrono::high_resolution_clock::now();
    DFSRecursive(start);
    auto end_time = chrono::high_resolution_clock::now();
    auto duration_recursive = chrono::duration_cast<chrono::microseconds>(end_time - start_time).count();
    cout << "Время выполнения (рекурсивный): " << duration_recursive << " микросекунд" << endl;

    cout << "Итеративный DFS: ";
    start_time = chrono::high_resolution_clock::now();
    DFSIterative(start);
    end_time = chrono::high_resolution_clock::now();
    auto duration_iterative = chrono::duration_cast<chrono::microseconds>(end_time - start_time).count();
    cout << "Время выполнения (итеративный): " << duration_iterative << " микросекунд" << endl;
}

int main() {
    setlocale(LC_ALL, "rus");
    int numVertices = 1000; 
    Graph g(numVertices);

    for (int i = 0; i < numVertices - 1; ++i) {
        g.addEdge(i, i + 1); 
        g.addEdge(i + 1, i); 
    }

    g.testDFS(0); 

    return 0;
}
