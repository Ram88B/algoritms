import heapq

class Node:
    def __init__(self, char, freq):
        self.char = char  
        self.freq = freq  
        self.left = None   
        self.right = None  

    def __lt__(self, other):
        return self.freq < other.freq  


def huffman_coding(frequencies):
    priority_queue = []
    
    for char, freq in frequencies.items():
        heapq.heappush(priority_queue, Node(char, freq))

    while len(priority_queue) > 1:
        left = heapq.heappop(priority_queue)
        right = heapq.heappop(priority_queue)

        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right

        heapq.heappush(priority_queue, merged)

    return priority_queue[0]


def generate_codes(node, current_code="", codes={}):
    if node is not None:
        if node.char is not None: 
            codes[node.char] = current_code
        generate_codes(node.left, current_code + "0", codes)  
        generate_codes(node.right, current_code + "1", codes)  
    return codes


def huffman(frequencies):
    root = huffman_coding(frequencies)
    return generate_codes(root)


if __name__ == "__main__":
    frequencies = {
        'a': 5,
        'b': 9,
        'c': 12,
        'd': 13,
        'e': 16,
        'f': 45
    }

    codes = huffman(frequencies)
    
    print("Коды Хаффмана для символов:")
    for char, code in codes.items():
        print(f"Символ: {char}, Код: {code}")

    large_frequencies = {chr(i): i for i in range(65, 91)}  
    large_codes = huffman(large_frequencies)

    print("Коды Хаффмана для больших значений:")
    for char, code in large_codes.items():
        print(f"Символ: {char}, Код: {code}")
