import random

def floyd_warshall(graph):
    n = len(graph)
    dist = [[float('inf')] * n for _ in range(n)]
    
    for i in range(n):
        dist[i][i] = 0
        for j in range(n):
            if graph[i][j] != float('inf'):
                dist[i][j] = graph[i][j]
    
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    for i in range(n):
        if dist[i][i] < 0:
            return "Negative cycle detected"
    
    return dist

def generate_large_test_data(num_vertices, max_weight):
    graph = [[float('inf')] * num_vertices for _ in range(num_vertices)]
    
    for i in range(num_vertices):
        for j in range(num_vertices):
            if i != j:
                weight = random.randint(1, max_weight)
                graph[i][j] = weight
    
    return graph

def test_floyd_warshall():
    num_vertices = 100
    max_weight = 10

    print("Generating graph...")
    graph = generate_large_test_data(num_vertices, max_weight)

    print("Running Floyd-Warshall algorithm...")
    result = floyd_warshall(graph)

    if isinstance(result, str):
        print(result)
    else:
        print(" Distances between vertex pairs:")
        print(result)

test_floyd_warshall()
